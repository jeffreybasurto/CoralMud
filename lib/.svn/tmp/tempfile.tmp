class Area
  attr_accessor :number, :rooms
  def initialize(n) 
	  @number = n
	  @rooms = []
	  $area_list[n] = self
  end
    
  # Adds a room to this area. The room has to be within the vnum range.
  def inject_room r 
	  @rooms[r.vnum % 1000] = r
  end
end

class Exit
  attr_accessor :towards_room,:from_room, :direction
                  
  def initialize(xnum,xnum2,dir)
    @direction = dir
    @towards_room = get_room_index(xnum)
    @from_room = get_room_index(xnum2)
    @from_room.exit_list[dir] = self
  end
   
  def enter xplayer
    xplayer.in_room.player_from_room(xplayer)
    from_room.text_to_room sprintf("%s leaves %s.\r\n", xplayer.name, @direction.exit_code_to_s)


    towards_room.text_to_room sprintf("%s has arrived.\r\n", xplayer.name)
    towards_room.player_to_room(xplayer)

        
    xplayer.cmd_look('')
  end  
end

class Room
    attr_accessor :vnum, :events, :people, :exit_list, :map_x, :map_y
    def initialize xnum
        # Instance variables  
	      @events = nil
        @map_x = nil
        @map_y = nil
        @vnum = xnum
        @people = []
        @exit_list = [nil, nil, nil, nil, nil, nil]

	      a = area_lookup(xnum)
	      a = Area.new(xnum/1000) if a == nil
	      a.inject_room self

        $room_list << self
	      $room_save_list << self  
    end
    public :initialize

    def to_yaml_properties
        ['@vnum']
    end

    # function   :: event_isset?
    # arguments  :: the type of event
    #
    # This function checks to see if a given type of event is enqueued/attached
    # to the room, and if it is, it will return a pointer to this event.
    def event_isset? type
        @events.each do |event|
            if event.type == type
                return event
            end
        end
        return nil
    end

    # function   :: strip_event
    # arguments  :: the type of event
    #
    # This function will dequeue all events of a given type from the room.
    def strip_event type
        @events.each do |event|
            if event.type == type
                event.dequeue_event
            end
        end
    end

    # function   :: add_event
    # arguments  :: the event and the delay
    #
    # This function attaches an event to a player, and sets all the correct
    # values, and makes sure it is enqueued into the event queue.
    def add_event event, delay
        # check to see if the event has a type
    	if event.type == :event_none
      	    bug "add_event: no type."
            return
        end

        # check to see of the event has a callback function
        if event.fun == nil
      	    bug "add_event: event type %d has no callback function.", event.type
      	    return
    	end

    	# set the correct variables for this event
    	event.ownertype  = :event_owner_dplayer
    	event.owner = self

    	# attach the event to the players local list
    	@events << event

    	# attempt to enqueue the event
    	if enqueue_event(event, delay) == false
      	    bug "add_event: event type %d failed to be enqueued.", event.type
    	end
    end


    def player_to_room(player)
        @people << player
        player.in_room = self
    end

    def player_from_room(player)
        @people.delete player
        player.in_room = nil
    end

    #method to send to every character in the room.
    def text_to_room txt
	people.each do |p| p.text_to_player(txt) end
    end
end

def save_rooms 
    while !$room_save_list.empty?
	r = $room_save_list.pop
 	save_room r
    end
end

def area_lookup num
    t = num / 1000
    return $area_list[t]
end

# find a free vnum in a certain area
def get_free_vnum num

    $area_list[num].rooms

    return nil # if we find nothing
end

# Global variables.
$area_list = []
$room_save_list = []
$room_list = []

Room.dig_rooms(1, 2, 0)
Room.dig_rooms(1, 3, 1)
Room.dig_rooms(1, 4, 2)
Room.dig_rooms(1, 5, 3)
Room.dig_rooms(5, 6, 0)
$test_map = nil

