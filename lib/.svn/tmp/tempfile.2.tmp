class BaseRoom

<<<<<<< .mine
class BaseRoom

=======
>>>>>>> .r30
end

class Area
  attr_accessor :maps, :number, :rooms
  def initialize(n) 
	  @number = n
	  @rooms = []
	  $area_list[n] = self
    @maps = []
  end

  #Finds a map for room if it exists.
  def get_map room
    @maps.each do |m|
      if m.rooms[room.vnum]
          return m
      end
    end  
    return nil  
  end

  #generates a new map for room.
  def gen_map room 
    m = AreaMap.new(room, 300) # generate map and mark rooms.
    @maps << m # add map to list of maps
    return m;
  end

  # Removes old maps from the list.
  def fix_maps map
    # Any other map should not contain the room sin map

    @maps.each do |m|
      next if m == map

      map.rooms.each_value do |t|
        if m.rooms.has_value?(t)
          @maps.delete m
        end
      end
    end
  end

  # find a free vnum within the given area
  def Area.gen_vnum area_num
    if (area_num == 0)
      real_n = 1
    else
      real_n = area_num * 1000
    end

    while (real_n < ((area_num + 1) * 1000))

      return real_n if (!get_room_index (real_n))

      real_n += 1
    end
    return nil
  end

    
  # Adds a room to this area. The room has to be within the vnum range.
  def inject_room r 
	  @rooms[r.vnum % 1000] = r
  end
end

class Exit
  attr_accessor :towards_room, :from_room, :direction
                  
  def initialize(xnum,xnum2,dir)
    @direction = dir
    @towards_room = get_room_index(xnum)
    @from_room = get_room_index(xnum2)
    @from_room.exit_list[dir] = self
  end
   
  def enter xplayer
    xplayer.in_room.player_from_room(xplayer)
    from_room.text_to_room sprintf("%s leaves %s.\r\n", xplayer.name, @direction.exit_code_to_s)


    towards_room.text_to_room sprintf("%s has arrived.\r\n", xplayer.name)
    towards_room.player_to_room(xplayer)

        
    xplayer.cmd_look('')
  end  
end

class CityRoom
  attr_accessor :vnum, :exit_list, :map_x, :map_y, :people, :events
  def initialize xnum
    # Instance variables  
    @people = []
    @events = []
    @map_x = nil
    @map_y = nil
    @vnum = xnum
    @exit_list = [nil, nil, nil, nil, nil, nil]

	  a = area_lookup(xnum)
	  a = Area.new(xnum/1000) if a == nil
	  a.inject_room self

    $room_list << self
	  $room_save_list << self  
  end
  def player_to_room(player)
    @people << player
    player.in_room = self
  end
  def player_from_room(player)
    @people.delete player
    player.in_room = nil
  end
  #method to send to every character in the room.
  def text_to_room txt
    people.each do |p| p.text_to_player(txt) end
  end
  def event_isset? type
    @events.each do |event|
      if event.type == type
        return event
      end
    end
    return nil
  end
  def strip_event type
    @events.each do |event|
      if event.type == type
        event.dequeue_event
      end
    end
  end
  def add_event event, delay
    # check to see if the event has a type
    if event.type == :event_none
      bug "add_event: no type."
      return
    end
    # check to see of the event has a callback function
    if event.fun == nil
      bug "add_event: event type %d has no callback function.", event.type
      return
    end
    # set the correct variables for this event
    event.ownertype  = :event_owner_droom
    event.owner = self
    # attach the event to the players local list
    @events << event
    # attempt to enqueue the event
    if enqueue_event(event, delay) == false
      bug "add_event: event type %d failed to be enqueued.", event.type
    end
  end

end

def save_rooms 
    while !$room_save_list.empty?
	r = $room_save_list.pop
 	save_room r
    end
end

def area_lookup num
    t = num / 1000
    return $area_list[t]
end

# Global variables.
$area_list = []
$room_save_list = []
$room_list = []
CityRoom.dig_rooms(1, 2, 0)
CityRoom.dig_rooms(1, 3, 1)
CityRoom.dig_rooms(1, 4, 2)
CityRoom.dig_rooms(1, 5, 3)
CityRoom.dig_rooms(5, 6, 0)

